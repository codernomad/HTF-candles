//@version=5
indicator('Market Sessions Day Candles JRA V2.0', overlay=true, max_boxes_count=500, max_labels_count=500, max_lines_count=500, max_bars_back=1000)
import boitoki/AwesomeColor/4 as ac

///////////////
// Groups Of Options
///////////////
g0  = 'OPTIONS FOR MARKET HOURS'
g1  = '♯1 SESSION TOKYO'
g2  = '♯2 SESSION LONDON'
g3  = '♯3 SESSION NEW YORK'
g4  = 'BOX OPTIONS FOR MARKET HOURS'
g6  = 'MARKET HOURS OPTIONS'
g7  = 'FIBONACCI LEBELS OPTIONS'
g8  = 'OPTIONS'

///////////////
// Defined Variables
///////////////
show = true
pips = syminfo.mintick * 10
max_bars = 500

option_yes = 'Yes'
option_no = '× No'
option_extend1 = 'Extend'
option_hide = '× Hide'

fmt_price = '{0,number,#.#####}'
fmt_pips  = '{0,number,#.#}'

icon_separator = ' • '

c_none = color.new(color.black, 100)

is_weekends = dayofweek == 7 or dayofweek == 1

///////////////
// Functions
///////////////
f_get_time_by_bar(bar_count) => timeframe.multiplier * bar_count * 60 * 1000

f_get_period (_session, _start, _lookback) =>
    result = math.max(_start, 1)
    for i = result to _lookback
        if na(_session[i+1]) and _session[i]
            result := i+1
            break
    result

f_get_label_position (_y, _side) =>
    switch _y
        'top'    => _side == 'outside' ? label.style_label_lower_left : label.style_label_upper_left
        'bottom' => _side == 'outside' ? label.style_label_upper_left : label.style_label_lower_left

f_get_day (n) =>
    switch n
        1 => 'Sun'
        2 => 'Mon'
        3 => 'Tue'
        4 => 'Wed'
        5 => 'Thu'
        6 => 'Fri'
        7 => 'Sat'

f_get_started (_session) => na(_session[1]) and _session
f_get_ended (_session) => na(_session) and _session[1]

///////////////
// Inputs, all the options to change settings depending on user.
///////////////

// Timezone
i_tz = input.string('GMT-6', title='Timezone', options=['GMT-11', 'GMT-10', 'GMT-9', 'GMT-8', 'GMT-7', 'GMT-6', 'GMT-5', 'GMT-4', 'GMT-3', 'GMT-2', 'GMT-1', 'GMT', 'GMT+1', 'GMT+2', 'GMT+3', 'GMT+330', 'GMT+4', 'GMT+430', 'GMT+5', 'GMT+530', 'GMT+6', 'GMT+7', 'GMT+8', 'GMT+9', 'GMT+10', 'GMT+11', 'GMT+12'], tooltip='<Your Timezone>', group=g0)
i_show_history = input.string(option_yes, 'History', tooltip='This will let you Enable all the past Market Hours', options=[option_yes, option_no], group=g0) == option_yes
i_lookback = 12 * 60

// Sessions of the Markets
i_show_sess3 = input.bool(true, 'Session 1: ', group=g1, inline='session3_1') and show
i_sess3_label = input.string('Tokyo', ' ', group=g1, inline='session3_1')
i_sess3_color = input.color(#AE81FF, ' ', group=g1, inline='session3_1')
i_sess3 = input.session('1800-0000', 'Time', group=g1)
i_sess3_extend = input.string(option_no, option_extend1, options=[option_no, option_extend1], group=g1)
i_sess3_fib = input.string(option_no, 'Fibonacci levels', group=g1, options=[option_yes, option_no]) != option_no
i_sess3_op = input.string(option_no, 'Opening range', group=g1, options=[option_yes, option_no]) != option_no and show

i_show_sess1 = input.bool(true, 'Session 2: ', group=g2, inline='session1_1') and show
i_sess1_label = input.string('London', ' ', group=g2, inline='session1_1')
i_sess1_color = input.color(#66D9EF, ' ', group=g2, inline='session1_1')
i_sess1 = input.session('0100-0630', 'Time', group=g2)
i_sess1_extend = input.string(option_no, option_extend1, options=[option_no, option_extend1], group=g2)
i_sess1_fib = input.string(option_no, 'Fibonacci levels', group=g2, options=[option_yes, option_no]) != option_no
i_sess1_op = input.string(option_no, 'Opening range', group=g2, options=[option_yes, option_no]) != option_no and show

i_show_sess2 = input.bool(true, 'Session 3: ', group=g3, inline='session2_1') and show
i_sess2_label = input.string('New York', ' ', group=g3, inline='session2_1')
i_sess2_color = input.color(#e65100, ' ', group=g3, inline='session2_1')
i_sess2 = input.session('0730-1400', 'Time', group=g3)
i_sess2_extend = input.string(option_no, option_extend1, options=[option_no, option_extend1], group=g3)
i_sess2_fib = input.string(option_no, 'Fibonacci levels', group=g3, options=[option_yes, option_no]) != option_no
i_sess2_op = input.string(option_no, 'Opening range', group=g3, options=[option_yes, option_no]) != option_no and show

// Show & Styles 
i_sess_border_style = input.string(line.style_dashed, 'Style', options=[line.style_solid, line.style_dotted, line.style_dashed], group=g4)
i_sess_border_width = input.int(1, 'Thickness', minval=0, group=g4)
i_sess_bgopacity = input.int(94, 'Transp', minval=0, maxval=100, step=1, group=g4, tooltip='Setting the 100 is no background color')

// Labels
i_label_show = input.bool(true, 'Show labels', inline='label_show', group=g6) and show
i_label_size = str.lower(input.string('Small', '', options=['Auto', 'Tiny', 'Small', 'Normal', 'Large', 'Huge'], inline='label_show', group=g6))
i_label_position_y = str.lower(input.string('Top', '', options=['Top', 'Bottom'], inline='label_show', group=g6))
i_label_position_s = str.lower(input.string('Outside', '', options=['Inside', 'Outside'], inline='label_show', group=g6))
i_label_position = f_get_label_position(i_label_position_y, i_label_position_s)
i_label_format_name = input.bool(true, 'Name', inline='label_format', group=g6)
i_label_format_day = input.bool(false, 'Day', inline='label_format', group=g6)
i_label_format_price = input.bool(false, 'Price', inline='label_format', group=g6)
i_label_format_pips = input.bool(false, 'Pips', inline='label_format', group=g6)

// Fibonacci levels
i_f_linestyle = input.string(line.style_solid, title="Style", options=[line.style_solid, line.style_dotted, line.style_dashed], group=g7)
i_f_linewidth = input.int(1, title="Thickness", minval=1, group=g7)


showCurrent  = input.bool(true, title="Show Current Timeframe Candle", group="Settings TimeFrame Candle", tooltip="Show the current open candle, or to wait until the close")
candleOptions = input.string(defval='Candles', title='Display Options', options=['Candles', 'Bars'], group='Settings TimeFrame Candle', tooltip='Chose Candles or Bars')


timeframe_ = input.timeframe("1D",title="Candle Resolution", group="Settings TimeFrame Candle", tooltip="Choose which higher timeframe you wish to display")
boxLimit = input.int(60, title="Maximum Candles to show", group="Settings TimeFrame Candle", tooltip="Choose how many candles are displayed")
lineLimit = boxLimit

candleOffset  = input.bool(false, title="Unshown All TimeFrames Candles", group="Settings TimeFrame Candle", tooltip="This will unshow TimeFrame Candles")
boxLimit := candleOffset ? 1 : boxLimit
lineLimit := candleOffset ? 1 : lineLimit


color_bull = input.color(color.new(color.green, 85), title="Bullish Candle Color", group="Colors")
color_bear = input.color(color.new(color.red, 85), title="Bearish Candle Color", group="Colors")

widthWicks = input.int(3, title="Wick Width", inline="1", group="Colors")
color_wicks = input.color(color.new(color.white, 40), inline="1", title="Color", group="Colors")


// ------------------------
// Drawing labels on the Market Sessions 
// ------------------------
f_render_label (_show, _session, _is_started, _color, _top, _bottom, _text, _delete_history) =>
    var label my_label = na
    var int start_time = na

    v_position_y = (i_label_position_y == 'top') ? _top : _bottom
    v_label = array.new_string()
    v_chg = _top - _bottom
    
    if _is_started
        start_time := time
    
    if i_label_format_name and not na(_text)
        array.push(v_label, _text)

    if i_label_format_day
        array.push(v_label, f_get_day(dayofweek(start_time, i_tz)))

    if i_label_format_price
        array.push(v_label, str.format(fmt_price, v_chg))
    
    if i_label_format_pips
        array.push(v_label, str.format(fmt_pips, v_chg / pips) + ' pips')

    if _show
        if _is_started
            my_label := label.new(time, v_position_y, array.join(v_label, icon_separator), textcolor=_color, color=c_none, size=i_label_size, style=i_label_position, xloc=xloc.bar_time)
            
            if _delete_history
                label.delete(my_label[1])

        if _session
            label.set_y(my_label, v_position_y)
            label.set_text(my_label, array.join(v_label, icon_separator))

// ------------------------
// Drawing Fibonacci levels on the Market Hours
// ------------------------
f_render_fibonacci (_show, _session, _is_started, _x1, _x2, _color, _top, _bottom, _level, _width, _style, _is_extend, _delete_history) =>
    var line my_line = na

    if _show
        y = (_top - _bottom) * _level + _bottom

        if _is_started
            my_line := line.new(_x1, y, _x2, y, width=_width, color=color.new(_color, 30), style=_style)

            if _is_extend
                line.set_extend(my_line, extend.right)

            if _delete_history
                line.delete(my_line[1])

        if _session
            line.set_y1(my_line, y)
            line.set_y2(my_line, y)

// ------------------------
// Drawing market boxes on each day
// ------------------------
f_render_session (_show, _session, _is_started, _is_ended, _color, _top, _bottom, _extend, _is_extend, _delete_history) =>
    var box my_box = na

    x0_1 = ta.valuewhen(na(_session[1]) and _session, bar_index, 1)
    x0_2 = ta.valuewhen(na(_session) and _session[1], bar_index, 0)
    var x1 = 0
    var x2 = 0
    var session_open  = 0.0
    var session_high  = 0.0
    var session_low   = 0.0

    if _show
        if _is_started
            diff = math.abs(x0_2 - x0_1)
            x1 := bar_index
            x2 := bar_index + (math.min(diff, max_bars))
            my_box := box.new(x1, _top, x2, _bottom, _color, i_sess_border_width, i_sess_border_style, bgcolor=color.new(_color, i_sess_bgopacity))

            session_open := open
            session_high := _top
            session_low  := _bottom

            if _is_extend
                box.set_extend(my_box, extend.right)

            if _delete_history
                box.delete(my_box[1])

        else if _session
            box.set_top(my_box, _top)
            box.set_bottom(my_box, _bottom)

            session_high := _top
            session_low  := _bottom
        
        else if _is_ended
            session_open := na
            box.set_right(my_box, bar_index)

    [x1, x2, session_open, session_high, session_low]

// ------------------------
// Drawing the signals on everyoptions
// ------------------------
draw (_show, _session, _color, _label, _extend, _show_fib, _show_op, _lookback) =>
    max = f_get_period(_session, 1, _lookback)
    top = ta.highest(high, max)
    bottom = ta.lowest(low, max)

    
    is_started = f_get_started(_session)
    is_ended = f_get_ended(_session)
    is_extend = _extend != option_no

    delete_history = (not i_show_history) or is_extend

    [x1, x2, _open, _high, _low] = f_render_session(_show, _session, is_started, is_ended, _color, top, bottom, _extend, is_extend, delete_history)

    if i_label_show
        f_render_label(_show, _session, is_started, _color, top, bottom, _label, delete_history)

    if _show_fib
        f_render_fibonacci(_show, _session, is_started, x1, x2, _color, top, bottom, 0.500, 2, line.style_solid, is_extend, delete_history)
        f_render_fibonacci(_show, _session, is_started, x1, x2, _color, top, bottom, 0.628, i_f_linewidth, i_f_linestyle, is_extend, delete_history)
        f_render_fibonacci(_show, _session, is_started, x1, x2, _color, top, bottom, 0.382, i_f_linewidth, i_f_linestyle, is_extend, delete_history)

    [_session, _open, _high, _low]

///////////////////
// Calculating depending on timeframes periods and displaythem
///////////////////
string tz = (i_tz == option_no or i_tz == '') ? na : i_tz
int sess1 = time(timeframe.period, i_sess1, tz)
int sess2 = time(timeframe.period, i_sess2, tz)
int sess3 = time(timeframe.period, i_sess3, tz)

///////////////////
// Plotting information.
///////////////////
[is_sess1, sess1_open, sess1_high, sess1_low] = draw(i_show_sess1, sess1, i_sess1_color, i_sess1_label, i_sess1_extend, i_sess1_fib, i_sess1_op, i_lookback)
[is_sess2, sess2_open, sess2_high, sess2_low] = draw(i_show_sess2, sess2, i_sess2_color, i_sess2_label, i_sess2_extend, i_sess2_fib, i_sess2_op, i_lookback)
[is_sess3, sess3_open, sess3_high, sess3_low] = draw(i_show_sess3, sess3, i_sess3_color, i_sess3_label, i_sess3_extend, i_sess3_fib, i_sess3_op, i_lookback)





//Candles settings-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Decalre our variables
var int previous_time = 0
var int mid = na

// Candle Arrays
var bArray = array.new_box()
var twArray = array.new_line()
var bwArray = array.new_line()

// Bar Arrays
var bbArray = array.new_line()
var oArray = array.new_line()
var cArray = array.new_line()

// Get our data
barsBack = showCurrent ? 0 : 1
[HTFopen, HTFclose, HTFhigh, HTFlow, HTFtime, HTFtimeclose]  = request.security(syminfo.tickerid, timeframe_, [open[barsBack],close[barsBack],high[barsBack],low[barsBack],time[barsBack],time_close[barsBack]], barmerge.gaps_off, barmerge.lookahead_on)

// -----------------------------------------
// Candlesticks
// -----------------------------------------
candleLong = HTFclose > HTFopen
BullBearColor = HTFclose >= HTFopen ? color_bull : color_bear
diff = time[1]-time[2]

// Get different y2 box vaules depending if the candle is bullish or not
boxEnd1 = candleLong ? HTFlow : HTFhigh
boxEnd2 = candleLong ? HTFhigh : HTFlow

HTFdiff = HTFtimeclose-HTFtime

pO = candleOffset and showCurrent ? HTFdiff : 0
mid := math.floor(((HTFtime+pO) + (HTFtimeclose+pO)) / 2)


// Create a candle only at the begininng of that new candle
if previous_time != HTFtime
    //
    if candleOptions == "Candles"
        array.push(twArray, line.new(mid, HTFopen, mid, boxEnd1, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(bwArray, line.new(mid, HTFclose, mid, boxEnd2, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(bArray, box.new(left=HTFtime+pO, top=HTFclose, right=HTFtimeclose+pO, bottom=HTFopen, bgcolor=BullBearColor, border_width=0,  xloc=xloc.bar_time))
    else
        array.push(bbArray, line.new(mid, HTFhigh, mid, HTFlow, color = color_wicks, width = widthWicks, xloc=xloc.bar_time))
        array.push(oArray, line.new(HTFtime+pO+diff, HTFopen, mid, HTFopen, color = BullBearColor, width = widthWicks, xloc=xloc.bar_time))
        array.push(cArray, line.new(HTFtimeclose+pO-diff, HTFclose, mid, HTFclose, color = BullBearColor, width = widthWicks, xloc=xloc.bar_time))
    previous_time := HTFtime


// Modify the most recent candle to match the live Price Action
if showCurrent and array.size(bArray) > 0
    tw = array.get(twArray, array.size(twArray)-1)
    b = array.get(bArray, array.size(bArray)-1)
    bw = array.get(bwArray, array.size(bwArray)-1)
    box.set_top(b, HTFclose)
    box.set_bgcolor(b, BullBearColor)
    line.set_y1(tw, HTFclose>HTFopen?HTFclose:HTFopen)
    line.set_y2(tw, HTFhigh)
    line.set_y1(bw, HTFclose>HTFopen?HTFopen:HTFclose)
    line.set_y2(bw, HTFlow)

if showCurrent and array.size(bbArray) > 0
    o = array.get(oArray, array.size(oArray)-1)
    b = array.get(bbArray, array.size(bbArray)-1)
    c = array.get(cArray, array.size(cArray)-1)
    line.set_color(c,BullBearColor)
    line.set_y1(b,HTFhigh)
    line.set_y2(b,HTFlow)
    line.set_y1(c, HTFclose)
    line.set_y2(c, HTFclose)


// Clean up the boxes and lines and make sure there is only the allowed limit shown on the chart
if array.size(bArray) > boxLimit
    b = array.shift(bArray) 
    box.delete(b)
    
if array.size(twArray) > lineLimit
    l = array.shift(twArray) 
    line.delete(l)

if array.size(bwArray) > lineLimit
    l = array.shift(bwArray) 
    line.delete(l)

// Bars
if array.size(bbArray) > boxLimit
    b = array.shift(bbArray) 
    line.delete(b)
    
if array.size(oArray) > lineLimit
    l = array.shift(oArray) 
    line.delete(l)

if array.size(cArray) > lineLimit
    l = array.shift(cArray) 
    line.delete(l)
